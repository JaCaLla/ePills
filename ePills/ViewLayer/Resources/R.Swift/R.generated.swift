//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `ColorBlack`.
    static let colorBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorBlack")
    /// Color `ColorGray50Semi`.
    static let colorGray50Semi = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGray50Semi")
    /// Color `ColorGray50`.
    static let colorGray50 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGray50")
    /// Color `ColorGreen`.
    static let colorGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGreen")
    /// Color `ColorWhite`.
    static let colorWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorWhite")
    
    /// `UIColor(named: "ColorBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorBlack, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorGray50", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorGray50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorGray50, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorGray50Semi", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorGray50Semi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorGray50Semi, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorGreen, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorWhite, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 18 localization keys.
    struct localizable {
      /// en translation: Add
      /// 
      /// Locales: en, es
      static let first_prescription_title = Rswift.StringResource(key: "first_prescription_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Administration
      /// 
      /// Locales: en
      static let prescription_form_section_administration = Rswift.StringResource(key: "prescription_form_section_administration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Day
      /// 
      /// Locales: en, es
      static let prescription_form_interval_list_day = Rswift.StringResource(key: "prescription_form_interval_list_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Hour
      /// 
      /// Locales: en, es
      static let prescription_form_interval_list_hour = Rswift.StringResource(key: "prescription_form_interval_list_hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Hours
      /// 
      /// Locales: en, es
      static let prescription_form_interval_list_hours = Rswift.StringResource(key: "prescription_form_interval_list_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Medicine
      /// 
      /// Locales: en
      static let prescription_form_section_medicine = Rswift.StringResource(key: "prescription_form_section_medicine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Medicine name can not be longer than 20 characters
      /// 
      /// Locales: en
      static let prescription_form_err_name_maximum = Rswift.StringResource(key: "prescription_form_err_name_maximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Medicine name cannot be empty
      /// 
      /// Locales: en
      static let prescription_form_err_name_empty = Rswift.StringResource(key: "prescription_form_err_name_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Medicine name must be a word with more than 5 characters
      /// 
      /// Locales: en
      static let prescription_form_err_name_minimum = Rswift.StringResource(key: "prescription_form_err_name_minimum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en
      static let prescription_form_section_medicine_name = Rswift.StringResource(key: "prescription_form_section_medicine_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Prescription form
      /// 
      /// Locales: en
      static let prescription_form_title = Rswift.StringResource(key: "prescription_form_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Press + for adding your first prescription
      /// 
      /// Locales: en
      static let first_prescription_title_msg_add = Rswift.StringResource(key: "first_prescription_title_msg_add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units box
      /// 
      /// Locales: en
      static let prescription_form_section_medicine_units_box = Rswift.StringResource(key: "prescription_form_section_medicine_units_box", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units box name cannot be empty
      /// 
      /// Locales: en
      static let prescription_form_err_units_box_empty = Rswift.StringResource(key: "prescription_form_err_units_box_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units dose
      /// 
      /// Locales: en
      static let prescription_form_section_administration_units_dose = Rswift.StringResource(key: "prescription_form_section_administration_units_dose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units prescription can not be empty
      /// 
      /// Locales: en
      static let prescription_form_err_units_dose_empty = Rswift.StringResource(key: "prescription_form_err_units_dose_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units prescription can not be greater than 99 units per box
      /// 
      /// Locales: en
      static let prescription_form_err_units_box_maximum = Rswift.StringResource(key: "prescription_form_err_units_box_maximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units prescription can not be greater than 99 units per box
      /// 
      /// Locales: en
      static let prescription_form_err_units_dose_maximum = Rswift.StringResource(key: "prescription_form_err_units_dose_maximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Add
      /// 
      /// Locales: en, es
      static func first_prescription_title(_: Void = ()) -> String {
        return NSLocalizedString("first_prescription_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Administration
      /// 
      /// Locales: en
      static func prescription_form_section_administration(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_section_administration", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Day
      /// 
      /// Locales: en, es
      static func prescription_form_interval_list_day(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hour
      /// 
      /// Locales: en, es
      static func prescription_form_interval_list_hour(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_hour", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hours
      /// 
      /// Locales: en, es
      static func prescription_form_interval_list_hours(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Medicine
      /// 
      /// Locales: en
      static func prescription_form_section_medicine(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_section_medicine", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Medicine name can not be longer than 20 characters
      /// 
      /// Locales: en
      static func prescription_form_err_name_maximum(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_name_maximum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Medicine name cannot be empty
      /// 
      /// Locales: en
      static func prescription_form_err_name_empty(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_name_empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Medicine name must be a word with more than 5 characters
      /// 
      /// Locales: en
      static func prescription_form_err_name_minimum(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_name_minimum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en
      static func prescription_form_section_medicine_name(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_section_medicine_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Prescription form
      /// 
      /// Locales: en
      static func prescription_form_title(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Press + for adding your first prescription
      /// 
      /// Locales: en
      static func first_prescription_title_msg_add(_: Void = ()) -> String {
        return NSLocalizedString("first_prescription_title_msg_add", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units box
      /// 
      /// Locales: en
      static func prescription_form_section_medicine_units_box(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_section_medicine_units_box", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units box name cannot be empty
      /// 
      /// Locales: en
      static func prescription_form_err_units_box_empty(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_units_box_empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units dose
      /// 
      /// Locales: en
      static func prescription_form_section_administration_units_dose(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_section_administration_units_dose", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units prescription can not be empty
      /// 
      /// Locales: en
      static func prescription_form_err_units_dose_empty(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_units_dose_empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units prescription can not be greater than 99 units per box
      /// 
      /// Locales: en
      static func prescription_form_err_units_box_maximum(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_units_box_maximum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units prescription can not be greater than 99 units per box
      /// 
      /// Locales: en
      static func prescription_form_err_units_dose_maximum(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_units_dose_maximum", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
