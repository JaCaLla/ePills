//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `ColorBlack`.
    static let colorBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorBlack")
    /// Color `ColorGray50Semi`.
    static let colorGray50Semi = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGray50Semi")
    /// Color `ColorGray50`.
    static let colorGray50 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGray50")
    /// Color `ColorGreen`.
    static let colorGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGreen")
    /// Color `ColorOrange`.
    static let colorOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorOrange")
    /// Color `ColorRed`.
    static let colorRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorRed")
    /// Color `ColorWhite`.
    static let colorWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorWhite")
    
    /// `UIColor(named: "ColorBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorBlack, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorGray50", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorGray50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorGray50, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorGray50Semi", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorGray50Semi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorGray50Semi, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorGreen, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorOrange, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorRed, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorWhite, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `glass`.
    static let glass = Rswift.ImageResource(bundle: R.hostingBundle, name: "glass")
    
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "glass", bundle: ..., traitCollection: ...)`
    static func glass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.glass, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 49 localization keys.
    struct localizable {
      /// en translation: 1 Day
      /// 
      /// Locales: en
      static let prescription_form_interval_list_1_day = Rswift.StringResource(key: "prescription_form_interval_list_1_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 1 Hour
      /// 
      /// Locales: en
      static let prescription_form_interval_list_1_hour = Rswift.StringResource(key: "prescription_form_interval_list_1_hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 12 Hours
      /// 
      /// Locales: en
      static let prescription_form_interval_list_12_hours = Rswift.StringResource(key: "prescription_form_interval_list_12_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 2 Days
      /// 
      /// Locales: en
      static let prescription_form_interval_list_2_days = Rswift.StringResource(key: "prescription_form_interval_list_2_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 2 Hours
      /// 
      /// Locales: en
      static let prescription_form_interval_list_2_hours = Rswift.StringResource(key: "prescription_form_interval_list_2_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 3 Hours
      /// 
      /// Locales: en
      static let prescription_form_interval_list_3_hours = Rswift.StringResource(key: "prescription_form_interval_list_3_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 4 Hours
      /// 
      /// Locales: en
      static let prescription_form_interval_list_4_hours = Rswift.StringResource(key: "prescription_form_interval_list_4_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 6 Hours
      /// 
      /// Locales: en
      static let prescription_form_interval_list_6_hours = Rswift.StringResource(key: "prescription_form_interval_list_6_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 8 Hours
      /// 
      /// Locales: en
      static let prescription_form_interval_list_8_hours = Rswift.StringResource(key: "prescription_form_interval_list_8_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: > Month
      /// 
      /// Locales: en
      static let home_prescription_more_than_month = Rswift.StringResource(key: "home_prescription_more_than_month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add
      /// 
      /// Locales: en, es
      static let first_prescription_title = Rswift.StringResource(key: "first_prescription_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Administration
      /// 
      /// Locales: en
      static let prescription_form_section_administration = Rswift.StringResource(key: "prescription_form_section_administration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Atention!
      /// 
      /// Locales: en
      static let home_alert_title = Rswift.StringResource(key: "home_alert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Day
      /// 
      /// Locales: en, es
      static let prescription_form_interval_list_day = Rswift.StringResource(key: "prescription_form_interval_list_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Dose ellapsed, press icon to mark
      /// 
      /// Locales: en
      static let home_prescription_ongoing_ellapsed = Rswift.StringResource(key: "home_prescription_ongoing_ellapsed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: General
      /// 
      /// Locales: en
      static let setup_section_general = Rswift.StringResource(key: "setup_section_general", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en
      static let home_title = Rswift.StringResource(key: "home_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Hour
      /// 
      /// Locales: en, es
      static let prescription_form_interval_list_hour = Rswift.StringResource(key: "prescription_form_interval_list_hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Hours
      /// 
      /// Locales: en, es
      static let prescription_form_interval_list_hours = Rswift.StringResource(key: "prescription_form_interval_list_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: In course, next dose:
      /// 
      /// Locales: en
      static let home_prescription_onging = Rswift.StringResource(key: "home_prescription_onging", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Medicine
      /// 
      /// Locales: en
      static let prescription_form_section_medicine = Rswift.StringResource(key: "prescription_form_section_medicine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Medicine name can not be longer than 20 characters
      /// 
      /// Locales: en
      static let prescription_form_err_name_maximum = Rswift.StringResource(key: "prescription_form_err_name_maximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Medicine name cannot be empty
      /// 
      /// Locales: en
      static let prescription_form_err_name_empty = Rswift.StringResource(key: "prescription_form_err_name_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Medicine name must be a word with more than 5 characters
      /// 
      /// Locales: en
      static let prescription_form_err_name_minimum = Rswift.StringResource(key: "prescription_form_err_name_minimum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en
      static let prescription_form_section_medicine_name = Rswift.StringResource(key: "prescription_form_section_medicine_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next dose: 
      /// 
      /// Locales: en
      static let notification_next_dose = Rswift.StringResource(key: "notification_next_dose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Not started. Press icon to start
      /// 
      /// Locales: en
      static let home_prescription_not_started = Rswift.StringResource(key: "home_prescription_not_started", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Otros
      /// 
      /// Locales: en
      static let setup_section_others = Rswift.StringResource(key: "setup_section_others", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Presciption finished, press renew to start again
      /// 
      /// Locales: en
      static let home_prescription_finished = Rswift.StringResource(key: "home_prescription_finished", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Prescription form
      /// 
      /// Locales: en
      static let prescription_form_title = Rswift.StringResource(key: "prescription_form_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Press + for adding your first prescription
      /// 
      /// Locales: en
      static let first_prescription_title_msg_add = Rswift.StringResource(key: "first_prescription_title_msg_add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Reset
      /// 
      /// Locales: en
      static let setup_option_reset = Rswift.StringResource(key: "setup_option_reset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Setup
      /// 
      /// Locales: en
      static let setup_title = Rswift.StringResource(key: "setup_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This prescription is going to be eliminated! Proceed?
      /// 
      /// Locales: en
      static let home_alert_message = Rswift.StringResource(key: "home_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units box
      /// 
      /// Locales: en
      static let prescription_form_section_medicine_units_box = Rswift.StringResource(key: "prescription_form_section_medicine_units_box", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units box name cannot be empty
      /// 
      /// Locales: en
      static let prescription_form_err_units_box_empty = Rswift.StringResource(key: "prescription_form_err_units_box_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units dose
      /// 
      /// Locales: en
      static let prescription_form_section_administration_units_dose = Rswift.StringResource(key: "prescription_form_section_administration_units_dose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units prescription can not be empty
      /// 
      /// Locales: en
      static let prescription_form_err_units_dose_empty = Rswift.StringResource(key: "prescription_form_err_units_dose_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units prescription can not be greater than 99 units per box
      /// 
      /// Locales: en
      static let prescription_form_err_units_box_maximum = Rswift.StringResource(key: "prescription_form_err_units_box_maximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units prescription can not be greater than 99 units per box
      /// 
      /// Locales: en
      static let prescription_form_err_units_dose_maximum = Rswift.StringResource(key: "prescription_form_err_units_dose_maximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Update prescription
      /// 
      /// Locales: en
      static let prescription_form_title_update = Rswift.StringResource(key: "prescription_form_title_update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Version
      /// 
      /// Locales: en
      static let setup_option_version = Rswift.StringResource(key: "setup_option_version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yes
      /// 
      /// Locales: en
      static let home_alert_ok = Rswift.StringResource(key: "home_alert_ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You can take your dose, press icon to mark
      /// 
      /// Locales: en
      static let home_prescription_ongoing_ready = Rswift.StringResource(key: "home_prescription_ongoing_ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: d
      /// 
      /// Locales: en
      static let home_prescription_days_suffix = Rswift.StringResource(key: "home_prescription_days_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ePills
      /// 
      /// Locales: en
      static let app_name = Rswift.StringResource(key: "app_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: h
      /// 
      /// Locales: en
      static let home_prescription_hours_suffix = Rswift.StringResource(key: "home_prescription_hours_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: m
      /// 
      /// Locales: en
      static let home_prescription_mins_suffix = Rswift.StringResource(key: "home_prescription_mins_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: s
      /// 
      /// Locales: en
      static let home_prescription_secs_suffix = Rswift.StringResource(key: "home_prescription_secs_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: 1 Day
      /// 
      /// Locales: en
      static func prescription_form_interval_list_1_day(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_1_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1 Hour
      /// 
      /// Locales: en
      static func prescription_form_interval_list_1_hour(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_1_hour", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 12 Hours
      /// 
      /// Locales: en
      static func prescription_form_interval_list_12_hours(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_12_hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2 Days
      /// 
      /// Locales: en
      static func prescription_form_interval_list_2_days(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_2_days", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2 Hours
      /// 
      /// Locales: en
      static func prescription_form_interval_list_2_hours(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_2_hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3 Hours
      /// 
      /// Locales: en
      static func prescription_form_interval_list_3_hours(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_3_hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 4 Hours
      /// 
      /// Locales: en
      static func prescription_form_interval_list_4_hours(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_4_hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 6 Hours
      /// 
      /// Locales: en
      static func prescription_form_interval_list_6_hours(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_6_hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 8 Hours
      /// 
      /// Locales: en
      static func prescription_form_interval_list_8_hours(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_8_hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: > Month
      /// 
      /// Locales: en
      static func home_prescription_more_than_month(_: Void = ()) -> String {
        return NSLocalizedString("home_prescription_more_than_month", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add
      /// 
      /// Locales: en, es
      static func first_prescription_title(_: Void = ()) -> String {
        return NSLocalizedString("first_prescription_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Administration
      /// 
      /// Locales: en
      static func prescription_form_section_administration(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_section_administration", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Atention!
      /// 
      /// Locales: en
      static func home_alert_title(_: Void = ()) -> String {
        return NSLocalizedString("home_alert_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Day
      /// 
      /// Locales: en, es
      static func prescription_form_interval_list_day(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dose ellapsed, press icon to mark
      /// 
      /// Locales: en
      static func home_prescription_ongoing_ellapsed(_: Void = ()) -> String {
        return NSLocalizedString("home_prescription_ongoing_ellapsed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: General
      /// 
      /// Locales: en
      static func setup_section_general(_: Void = ()) -> String {
        return NSLocalizedString("setup_section_general", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home
      /// 
      /// Locales: en
      static func home_title(_: Void = ()) -> String {
        return NSLocalizedString("home_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hour
      /// 
      /// Locales: en, es
      static func prescription_form_interval_list_hour(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_hour", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hours
      /// 
      /// Locales: en, es
      static func prescription_form_interval_list_hours(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_interval_list_hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: In course, next dose:
      /// 
      /// Locales: en
      static func home_prescription_onging(_: Void = ()) -> String {
        return NSLocalizedString("home_prescription_onging", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Medicine
      /// 
      /// Locales: en
      static func prescription_form_section_medicine(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_section_medicine", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Medicine name can not be longer than 20 characters
      /// 
      /// Locales: en
      static func prescription_form_err_name_maximum(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_name_maximum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Medicine name cannot be empty
      /// 
      /// Locales: en
      static func prescription_form_err_name_empty(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_name_empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Medicine name must be a word with more than 5 characters
      /// 
      /// Locales: en
      static func prescription_form_err_name_minimum(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_name_minimum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en
      static func prescription_form_section_medicine_name(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_section_medicine_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next dose: 
      /// 
      /// Locales: en
      static func notification_next_dose(_: Void = ()) -> String {
        return NSLocalizedString("notification_next_dose", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not started. Press icon to start
      /// 
      /// Locales: en
      static func home_prescription_not_started(_: Void = ()) -> String {
        return NSLocalizedString("home_prescription_not_started", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Otros
      /// 
      /// Locales: en
      static func setup_section_others(_: Void = ()) -> String {
        return NSLocalizedString("setup_section_others", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Presciption finished, press renew to start again
      /// 
      /// Locales: en
      static func home_prescription_finished(_: Void = ()) -> String {
        return NSLocalizedString("home_prescription_finished", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Prescription form
      /// 
      /// Locales: en
      static func prescription_form_title(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Press + for adding your first prescription
      /// 
      /// Locales: en
      static func first_prescription_title_msg_add(_: Void = ()) -> String {
        return NSLocalizedString("first_prescription_title_msg_add", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset
      /// 
      /// Locales: en
      static func setup_option_reset(_: Void = ()) -> String {
        return NSLocalizedString("setup_option_reset", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Setup
      /// 
      /// Locales: en
      static func setup_title(_: Void = ()) -> String {
        return NSLocalizedString("setup_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This prescription is going to be eliminated! Proceed?
      /// 
      /// Locales: en
      static func home_alert_message(_: Void = ()) -> String {
        return NSLocalizedString("home_alert_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units box
      /// 
      /// Locales: en
      static func prescription_form_section_medicine_units_box(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_section_medicine_units_box", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units box name cannot be empty
      /// 
      /// Locales: en
      static func prescription_form_err_units_box_empty(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_units_box_empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units dose
      /// 
      /// Locales: en
      static func prescription_form_section_administration_units_dose(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_section_administration_units_dose", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units prescription can not be empty
      /// 
      /// Locales: en
      static func prescription_form_err_units_dose_empty(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_units_dose_empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units prescription can not be greater than 99 units per box
      /// 
      /// Locales: en
      static func prescription_form_err_units_box_maximum(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_units_box_maximum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Units prescription can not be greater than 99 units per box
      /// 
      /// Locales: en
      static func prescription_form_err_units_dose_maximum(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_err_units_dose_maximum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Update prescription
      /// 
      /// Locales: en
      static func prescription_form_title_update(_: Void = ()) -> String {
        return NSLocalizedString("prescription_form_title_update", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Version
      /// 
      /// Locales: en
      static func setup_option_version(_: Void = ()) -> String {
        return NSLocalizedString("setup_option_version", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes
      /// 
      /// Locales: en
      static func home_alert_ok(_: Void = ()) -> String {
        return NSLocalizedString("home_alert_ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You can take your dose, press icon to mark
      /// 
      /// Locales: en
      static func home_prescription_ongoing_ready(_: Void = ()) -> String {
        return NSLocalizedString("home_prescription_ongoing_ready", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: d
      /// 
      /// Locales: en
      static func home_prescription_days_suffix(_: Void = ()) -> String {
        return NSLocalizedString("home_prescription_days_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ePills
      /// 
      /// Locales: en
      static func app_name(_: Void = ()) -> String {
        return NSLocalizedString("app_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: h
      /// 
      /// Locales: en
      static func home_prescription_hours_suffix(_: Void = ()) -> String {
        return NSLocalizedString("home_prescription_hours_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: m
      /// 
      /// Locales: en
      static func home_prescription_mins_suffix(_: Void = ()) -> String {
        return NSLocalizedString("home_prescription_mins_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: s
      /// 
      /// Locales: en
      static func home_prescription_secs_suffix(_: Void = ()) -> String {
        return NSLocalizedString("home_prescription_secs_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "glass", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'glass' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "glass", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'glass' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
